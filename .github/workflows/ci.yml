# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@dbbdc275be76ac10734476cc723d82dfe7ec6eda # v3.4.2

    - name: Build with Gradle Wrapper
      run: ./gradlew build

    - name: Build dockerfile
      run: ./gradlew dockerCreateDockerfile

    - name: Archive production artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build
        path: |
          build
          !build/tmp

    - name: Get version from gradle
      id: version
      run: echo version=$(./gradlew properties | awk '/^version:/ {print $2}') >> $GITHUB_OUTPUT

    outputs:
      version: ${{ steps.version.outputs.version }}

    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@dbbdc275be76ac10734476cc723d82dfe7ec6eda # v3.4.2
    #   with:
    #     gradle-version: '8.5'
    #
    # - name: Build with Gradle 8.5
    #   run: gradle build

  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
    # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
    - name: Generate and submit dependency graph
      uses: gradle/actions/dependency-submission@dbbdc275be76ac10734476cc723d82dfe7ec6eda # v3.4.2

  publish-amd64:

    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/download-artifact@v4
      - name: Log in to Docker Hub
        if: ${{ github.event_name != 'pull_request' }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          tags: "westelh/oci-billing-exporter:${{ needs.build.outputs.version }}"
          context: build/docker
          platforms: linux/amd64
          # For pull requests, export results to the build cache.
          # Otherwise, push to a registry.
          outputs: ${{ github.event_name == 'pull_request' && 'type=cacheonly' || 'type=registry' }}

  publish-arm64:

    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/download-artifact@v4
    - name: Log in to Docker Hub
      if: ${{ github.event_name != 'pull_request' }}
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        version: "lab:latest"
        driver: cloud
        endpoint: "westelh/ci-cd"

    - name: Build and push
      uses: docker/build-push-action@v6
      with:
        tags: "westelh/oci-billing-exporter-arm:${{ needs.build.outputs.version }}"
        context: build/docker
        platforms: linux/arm64
        # For pull requests, export results to the build cache.
        # Otherwise, push to a registry.
        outputs: ${{ github.event_name == 'pull_request' && 'type=cacheonly' || 'type=registry' }}

  publish-ghcr:

    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/download-artifact@v4
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          tags: "ghcr.io/westelh/oci-billing-exporter:${{ needs.build.outputs.version }}"
          context: build/docker
          builder: ${{ steps.buildx.outputs.name }}
          platforms: ${{ steps.buildx.outputs.platforms }}
          # For pull requests, export results to the build cache.
          # Otherwise, push to a registry.
          outputs: ${{ github.event_name == 'pull_request' && 'type=cacheonly' || 'type=registry' }}
